<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用就是对SQL进行分类化管理，理解SQL隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用，namespace等于mapper接口地址
-->
<mapper namespace="com.wang.mapper.UserMapper">
    <!--查询用户名-->
    <select id="getUserName" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT username FROM USER WHERE username=#{value}
    </select>
    <!--注册-->
    <insert id="register" parameterType="User">
        INSERT INTO USER(username, password) VALUES (#{username},#{password})
    </insert>
    <!--验证密码-->
    <select id="getPassword" parameterType="java.lang.String" resultType="User">
        SELECT * FROM USER WHERE username=#{username}
    </select>
    <!--获取用户-->
    <select id="getUser" parameterType="java.lang.String" resultType="User">
        select * from user where username=#{username}
    </select>
    <!--更新用户图片-->
    <update id="updateUserImg" parameterType="User">
        update user set img_path=#{imgPath} where username=#{username}
    </update>
    <!--修改用户信息-->
    <update id="updateUser" parameterType="User">
        update user
        <set>
          <if test="sex!=null">sex=#{sex},</if>
          <if test="name!=null">name=#{name},</if>
          <if test="birthday!=null">birthday=#{birthday},</if>
          <if test="email!=null">email=#{email}</if>
        </set>
        where username=#{username}
    </update>
    <!--定义SQL片段
    id：SQL片段的唯一标识

    经验：是基于单表来定义SQL片段，这样话这个SQL片段可重用性才高
    在SQL片段中不要包含where
    -->
    <!--<sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                AND user.sex=#{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND user.username LIKE '%${userCustom.username}%'
            </if>
            <if test="ids!=null">
                &lt;!&ndash;使用foreach遍历传入ids
                collection:指定输入对象中集合属性
                item:每个遍历生成对象中
                open:开始遍历时拼接串
                close:结束遍历时拼接的串
                separator：遍历的两个对象中需要拼接的串
                &ndash;&gt;
                &lt;!&ndash;使用实现下边的SQL拼接
                    AND (id=1 OR id=10 OR id=16)
                &ndash;&gt;
                <foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
                  &lt;!&ndash;每次遍历需要拼接的串&ndash;&gt;
                    id=#{user_id}
                </foreach>
                &lt;!&ndash;实现 AND id IN (1,10,16) 拼接
                <foreach collection="ids" item="user_id" open="AND id IN (" close=")" separator=",">
                    #{user_id}
                </foreach>
                &ndash;&gt;
            </if>
        </if>
    </sql>

    &lt;!&ndash;定义resultMap
    将 SELECT id id_, username username_ FROM USER WHERE id=#{value}和User类中属性做一个关系映射

    type:resultMap最终所映射的java对象类型，可以使用别名
    id:对resultMap的唯一标识

    &ndash;&gt;
    <resultMap id="userResultMap" type="user">
        &lt;!&ndash;id表示查询结果集中唯一标识
        column：查询出来的列名
        property:type指定的pojo类型中的属性名
        最终resultMap对column和property做一个映射关系（对应关系）
        &ndash;&gt;
        <id column="id_" property="id"/>
        &lt;!&ndash;
        result:对普通列映射
         column：查询出来的列名
        property:type指定的pojo类型中的属性名
        最终resultMap对column和property做一个映射关系（对应关系）
        &ndash;&gt;
        <result column="username_" property="username"/>
    </resultMap>

    &lt;!&ndash;用户信息的综合查询
    #{userCustom.sex}:取出pojo包装对象中性别的值
    ${userCustom.username}:取出pojo包装对象中用户名称
    &ndash;&gt;
    <select id="findUserList" parameterType="com.qy.domain.UserQueryVo" resultType="com.qy.domain.UserCustom">
        SELECT * FROM user
        &lt;!&ndash;
            where可以自动去掉条件中的第一个and
        &ndash;&gt;
        <where>
            &lt;!&ndash;引用SQL片段的id，如果refid指定的id不在本mapper文件中，需要前面加namespace&ndash;&gt;
            <include refid="query_user_where"></include>
            &lt;!&ndash;在这里还要引用其他的SQL片段&ndash;&gt;
        </where>
    </select>

    &lt;!&ndash;用户信息综合查询总数&ndash;&gt;
    <select id="findUserCount" parameterType="com.qy.domain.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
        &lt;!&ndash;
            where可以自动去掉条件中的第一个and
        &ndash;&gt;
        <where>
            <include refid="query_user_where"></include>
        </where>
    </select>


    &lt;!&ndash;映射文件中配置很多SQL语句&ndash;&gt;
    &lt;!&ndash;需求：通过id查询用户表的记录&ndash;&gt;
    &lt;!&ndash;通过select执行数据库查询
        id：标识映射文件中的SQL，
        将SQL语句封装到mappedStatement对象中，所以将id称为statement的id
        #{}表示一个占位符号
        parameterType:指定输入参数的类型，这里指定int型
        #{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其他名称
        resultType：指定SQL输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象

    &ndash;&gt;
    <select id="findUserById" parameterType="int" resultType="com.qy.domain.User">
      SELECT * FROM USER WHERE id=#{id}
    </select>

    &lt;!&ndash;使用resultMap进行输出映射
    resultMap:指定定义resultMap的id，如果这个resultMap在其他的mapper文件，前边需要加namespace
    &ndash;&gt;
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_, username username_ FROM USER WHERE id=#{value}
    </select>

    &lt;!&ndash;根据用户名称模糊查询用户信息
    resultType：指定就是单条记录所映射的java对象类型
    ${}:表示拼接sql串，将接收的到的参数内容不加任何修饰拼接在sql中。
    使用${}拼接SQL，引起sql注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    &ndash;&gt;
    <select id="findUserByName" parameterType="java.lang.String" resultType="user">
        SELECT * FROM USER WHERE username LIKE '%${value}%'
    </select>

    &lt;!&ndash;添加用户
    parameterType:指定输入参数类型是pojo（包括用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，MyBatis通过OGNL获取对象的属性值
    &ndash;&gt;
    <insert id="insertUser" parameterType="com.qy.domain.User">
        &lt;!&ndash;将插入数据的主键返回，返回到user对象中
            SELECT LAST_INSERT_ID():得到刚insert进去记录的主键值，只适用于自增主键
            keyProperty：将查询到主键值设置到parameterType指定的对象的那个属性
            order： SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
            resultType：指定 SELECT LAST_INSERT_ID()的结果类型
        &ndash;&gt;
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO USER (username,birthday,sex,address)VALUES (#{username},#{birthday},#{sex},#{address})
        &lt;!&ndash;
            使用mysql的uuid()生成主键
            执行过程
            首先通过uuid()得到主键，将主键设置到user对象的id属性中
            其次在insert执行时，从user对象中取出及属性值
        &ndash;&gt;
       &lt;!&ndash; <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            SELECT uuid()
        </selectKey>
        INSERT INTO USER (id,username,birthday,sex,address)VALUES (#{id},#{username},#{birthday},#{sex},#{address})&ndash;&gt;
    </insert>

    &lt;!&ndash;删除用户
    根据id删除用户，需要输入id值
    &ndash;&gt;
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM USER WHERE id=#{id}
    </delete>

    &lt;!&ndash;根据id更新用户
    分析：
    需要传入用户的id
    需要传入用户的更新信息
    parameterType指定user对象，包括id和更新信息，注意：id必须存在
    #{id}：从输入user对象中获取id属性值
    &ndash;&gt;
    <update id="updateUser" parameterType="com.qy.domain.User">
        UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
    </update>-->


</mapper>
